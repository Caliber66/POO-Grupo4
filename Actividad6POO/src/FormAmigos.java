package pooseg6;

import java.io.File;
import java.io.IOException;
import java.io.RandomAccessFile;
import javax.swing.JOptionPane;

/**
 *
 * @author danie
 */
public class FormAmigos extends javax.swing.JFrame {

    /**
     * Creates new form FormAmigos
     */
    public FormAmigos() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jButton5 = new javax.swing.JButton();
        lblName = new javax.swing.JLabel();
        lblNumber = new javax.swing.JLabel();
        btnCreate = new javax.swing.JButton();
        btnRead = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        txtNumber = new javax.swing.JTextField();
        txtName = new javax.swing.JTextField();
        btnClear = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();

        jButton5.setText("jButton5");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblName.setText("Name:");

        lblNumber.setText("Number:");

        btnCreate.setText("Create");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });

        btnRead.setText("Read");
        btnRead.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReadActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        txtNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNumberActionPerformed(evt);
            }
        });

        txtName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNameActionPerformed(evt);
            }
        });

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(24, 24, 24)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(lblName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(lblNumber, javax.swing.GroupLayout.DEFAULT_SIZE, 73, Short.MAX_VALUE))
                                                .addGap(26, 26, 26)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(txtNumber, javax.swing.GroupLayout.DEFAULT_SIZE, 228, Short.MAX_VALUE)
                                                        .addComponent(txtName)))
                                        .addGroup(layout.createSequentialGroup()
                                                .addContainerGap()
                                                .addComponent(btnCreate)
                                                .addGap(18, 18, 18)
                                                .addComponent(btnRead)
                                                .addGap(18, 18, 18)
                                                .addComponent(btnUpdate)
                                                .addGap(18, 18, 18)
                                                .addComponent(btnDelete))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(79, 79, 79)
                                                .addComponent(btnClear)
                                                .addGap(63, 63, 63)
                                                .addComponent(btnExit)))
                                .addContainerGap(36, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(lblName)
                                        .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(38, 38, 38)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(lblNumber)
                                        .addComponent(txtNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(btnCreate)
                                        .addComponent(btnRead)
                                        .addComponent(btnUpdate)
                                        .addComponent(btnDelete))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(btnClear)
                                        .addComponent(btnExit))
                                .addGap(30, 30, 30))
        );

        pack();
    }// </editor-fold>

    private void txtNameActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void txtNumberActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void btnReadActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            String nameNumberString;
            String name;
            String newName = String.valueOf(txtName.getText());
            long number;
            int index;

            // Using file pointer creating the file.
            File file = new File("C:\\Users\\danie\\Documents\\Codes\\contactFriends.txt");

            if (!file.exists()) {

                // Create a new file if not exists.
                file.createNewFile();
            }

            // Opening file in reading and writing mode.

            RandomAccessFile raf = new RandomAccessFile(file, "rw");
            boolean found = false;

            //Traversing the file
            // getFilePointer( give the current offset value from the file.
            while (raf.getFilePointer() < raf.length()) {

                //reading line from the file
                nameNumberString = raf.readLine();

                // splitting the string to get name and number
                String[] lineSplit = nameNumberString.split("!");

                // separating name and number.
                name = lineSplit[0];
                number = Long.parseLong(lineSplit[1]);

                //Print the contact data
                System.out.println("Friend Name: " + name + "Contact Number: " + number);
            }
        }
        catch (IOException ioe)
        {
            System.out.println(ioe);
        }
        catch (NumberFormatException nef)
        {
            System.out.println(nef);
        }
    }

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            // Get thename of the contact to be updated from the command line argument
            String newName = String.valueOf(txtName.getText()) ;
            String nameNumberString;
            String name;
            long number;
            int index;

            // Using file pointer creating the file.
            File file = new File("C:\\Users\\danie\\Documents\\Codes\\contactFriends.txt");

            if (!file.exists()) {

                // Create a new file if it doesn't exist
                file.createNewFile();
            }

            // opening file in reading and write mode.
            RandomAccessFile raf = new RandomAccessFile(file, "rw");
            boolean found = false;

            // Checking wether the name of contact exists.
            // getFilePointer() give the current offset value from start of the file.
            while (raf.getFilePointer() < raf.length()) {

                // reading line from the file.
                nameNumberString = raf.readLine();

                // Splitting the string to get name and number
                String[] lineSplit = nameNumberString.split("!");

                // Separating name and number
                name = lineSplit[0];
                number = Long.parseLong(lineSplit[1]);

                // If condition to find existence of record.
                if (name.equals(newName)) {
                    found = true;
                    break;
                }
            }

            // Delete the contact if record exists.
            if (found == true) {

                // Creating a temporary file with file pointer as tmpFile.
                File tmpFile = new File("temp.txt");

                // Opening this temporary file in ReadWrite mode
                RandomAccessFile tmpraf = new RandomAccessFile(tmpFile, "rw");

                //Set the file pointer to start
                raf.seek(0);

                // Traversing the contactoAmigos.txt file
                while (raf.getFilePointer() < raf.length()) {

                    // Reading the contact from the file
                    nameNumberString = raf.readLine();

                    index = nameNumberString.indexOf("!");
                    name = nameNumberString.substring(0, index);

                    // Check if the fetched contact is the one to be deleted
                    if (name.equals(newName)) {

                        // Skip inserting this contact into the temporary file
                        continue;
                    }

                    // Add this contact in the temporary file
                    tmpraf.writeBytes(nameNumberString);

                    // Add the line separator in the temporary file
                    tmpraf.writeBytes(System.lineSeparator());
                }
                // The contact has been deleted now so copy the updated content from the temporary file to the original file.
                // Set both file pointers to start
                raf.seek(0);
                tmpraf.seek(0);

                // Copy the contents from the temporary file to original file.
                while (tmpraf.getFilePointer() < tmpraf.length()) {
                    raf.writeBytes(tmpraf.readLine());
                    raf.writeBytes(System.lineSeparator());
                }
                // Set the length of the original file to that of the temporary
                raf.setLength(tmpraf.length());

                // Closing the resources.
                tmpraf.close();
                raf.close();

                // Deleting the temporary file
                tmpFile.delete();

                JOptionPane.showMessageDialog(null, "Contact " + newName + " has been deleted.");
            }
            // The contact to be deleted could not be found
            else {
                // Closing the resources.
                raf.close();

                // Print the message
                System.out.println("Input name" + " does not exist.");
            }
        }
        catch (IOException ioe) {
            System.out.println(ioe);
        }
    }

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {

        try {
            // Get the name of the contact to be updated
            // From the command line arguments
            String newName = String.valueOf(txtName.getText());

            // Get the number of the contact to be updated
            // From the command line arguments
            long newNumber = Long.parseLong(txtNumber.getText());

            String nameNumberString;
            String name;
            long number;
            int index;

            // Using file pointer creating the file
            File file = new File("C:\\Users\\danie\\Documents\\Codes\\contactFriends.txt");


            if (!file.exists()) {

                // Create a new file if it doesn't exist
                file.createNewFile();
            }

            // Opening file in reading and writing mode

            RandomAccessFile raf = new RandomAccessFile(file, "rw");
            boolean found = false;

            // Checking wether the name of the contact already exists.
            // getFilePointer() give the current offset value from start of the file.
            while (raf.getFilePointer() < raf.length()) {

                // reading line from the file
                nameNumberString = raf.readLine();

                // splitting the string to get name and number
                String[] lineSplit
                        = nameNumberString.split("!");
                // separating name and number.
                name = lineSplit[0];
                number = Long.parseLong(lineSplit[1]);

                // if condition to find existence of record.
                if ( name == newName
                        || number == newNumber) {
                    found = true;
                    break;
                }
            }
            if (found == false) {

                // Enter the if block when a record is nnot already present in the file.
                nameNumberString = newName + "!" + String.valueOf(newNumber);

                // writeBytes function to write a string as a sequence of bytes.
                raf.writeBytes(nameNumberString);

                // To inset the next record in new line
                raf.writeBytes(System.lineSeparator());

                // Print the message
                JOptionPane.showMessageDialog(null, "Contact " + newName + " has been added.");

                // Closing resources
                raf.close();
            }
            else {
                // Closing the resources.
                raf.close();

                // Print the message
                System.out.println(" Input Name" + " does not exist. ");
            }
        }
        catch (IOException ioe) {
            System.out.println(ioe);
        }
        catch (NumberFormatException nef) {
            System.out.println(nef);
        }
    }

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {
        System.exit(0);
    }

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {
        txtName.setText("");
        txtNumber.setText("");
    }

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormAmigos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormAmigos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormAmigos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormAmigos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new FormAmigos().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnRead;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblNumber;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtNumber;
    // End of variables declaration
}